name: "UPDATE [JAVA] WC"
#type: REUSABLE WORKFLOW (WC = workflow_call)

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "[ref] e.g. branch, tag or commit to checkout [default: github_ref_name || github_head_ref ]"
        required: false
      semver_strategy:
        type: string
        description: "[semver_strategy] e.g. major,minor,patch,rc,meta [default: patch]"
        required: false
    secrets:
      G_TOKEN:
        description: "Github token"
        required: false

jobs:
  update:
    name: "Update Java"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Read Input"
        id: "inputs"
        run: |
          echo ""
          echo "--------------------- BRANCH -------------------"
          ref_default=${{ github.ref_name || github.head_ref }}
          ref="${ref_A:-${ref_B:-${ref_C:-${ref_default}}}}"
          echo "ref [${ref}]"
          echo "ref=${ref}" >> $GITHUB_OUTPUT
          echo "--------------------- SEMVER STRATEGY ----------"
          semver_strategy="${semver_strategy_A:-${semver_strategy_B:-${semver_strategy_C:-patch}}}"
          echo "semver_strategy [$semver_strategy]"
          echo "semver_strategy=$semver_strategy" >> $GITHUB_OUTPUT
          echo "--------------------- ENVS ---------------------"
          env
        env:
          ref_A: ${{ inputs.ref }}
          ref_B: ${{ github.event.inputs.ref }}
          ref_C: ${{ github.event.client_payload.ref }}
      - name: "Checkout"
        uses: actions/checkout@main
        with:
          fetch-depth: 5
          ref: ${{ steps.inputs.outputs.ref }}
          token: ${{ secrets.G_TOKEN || secrets.CI_TOKEN_WORKFLOW || github.token }}
      - name: "Read Java Info"
        id: "java_info"
        uses: YunaBraska/java-info-action@main
      - name: "Setup Java"
        uses: actions/setup-java@main
        with:
          java-version: ${{ steps.java_info.outputs.java_version }}
          distribution: 'adopt'
      - name: "Resolve Dependencies & Plugins"
        run: |
          ${{ steps.java_info.outputs.cmd_resolve_deps }}
          ${{ steps.java_info.outputs.cmd_resolve_plugs }}
      - name: "Update"
        run: |
          ${{ steps.java_info.outputs.cmd_update_wrapper }}
          ${{ steps.java_info.outputs.cmd_update_props }}
          ${{ steps.java_info.outputs.cmd_update_parent }}
      - name: "Read Git Info"
        id: "git_info"
        uses: YunaBraska/git-info-action@main
      - name: "Setup Python"
        if: steps.git_info.outputs.has_changes == 'true' || steps.git_info.outputs.has_local_changes == 'true'
        uses: actions/setup-python@main
        with:
          python-version: '3.x'
      - name: "Set Version"
        id: "semver"
        if: steps.git_info.outputs.has_changes == 'true' || steps.git_info.outputs.has_local_changes
        run: |
          echo ""
          echo "has_changes [${{ steps.git_info.outputs.has_changes }}]"
          echo "has_local_changes [${{ steps.git_info.outputs.has_local_changes }}]"
          echo "tag_latest [${{ steps.git_info.outputs.tag_latest }}]"
          echo "semver_strategy [${{ steps.inputs.outputs.semver_strategy }}]"
          mkdir -p target
          wget -nc -nv https://raw.githubusercontent.com/YunaBraska/YunaBraska/main/.github/scripts/python/functions/semver.py -P target
          chmod +x target/semver.py

          new_version=$(target/semver.py --version=${{ steps.git_info.outputs.tag_latest }} --increase=${{ steps.inputs.outputs.semver_strategy }} --output=result)
          echo "new_version [$new_version]"

          [[ "${new_version}" == \"*\" || "${new_version}" == \'*\' ]] && new_version="${new_version:1:-1}"
          version_file=$(find . -name "version.txt" -type f)
          version_file=${version_file:-version.txt}
          echo "$new_version" > $version_file

          rm -rf target/semver.py
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
      - name: "Push changes"
        if: steps.git_info.outputs.has_changes == 'true' || steps.git_info.outputs.has_local_changes == 'true'
        uses: stefanzweifel/git-auto-commit-action@master
        with:
          commit_message: "chore: 🏷️ new version [${{ steps.semver.outputs.new_version }}]"
          commit_user_name: "Kira"
          commit_user_email: "kira@yuna.berlin"
          commit_author: "Kira <kira@yuna.berlin>"
          tagging_message: ${{ steps.semver.outputs.new_version }}
          skip_dirty_check: true
          skip_fetch: true
          skip_checkout: true
          disable_globbing: true
          create_branch: false
