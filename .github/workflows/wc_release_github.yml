name: "GITHUB_RELEASE WC"
#type: REUSABLE WORKFLOW (WC = workflow_call)

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "[ref] e.g. branch, tag or commit to checkout [default: github_ref_name || github_head_ref ]"
        required: false
      artifacts_filter:
        type: string
        description: "[artifacts_filter] artifacts to append on the release [default: target/*.jar,build/*.jar]"
        required: false
    secrets:
      G_TOKEN:
        description: "Github token"
        required: false

jobs:
  release_github:
    name: "Update Java"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Read Input"
        id: "inputs"
        run: |
          echo ""
          echo "--------------------- BRANCH -------------------"
          ref_default=${{ github.ref_name || github.head_ref }}
          ref="${ref_A:-${ref_B:-${ref_C:-${ref_default}}}}"
          echo "ref [${ref}]"
          echo "ref=${ref}" >> $GITHUB_OUTPUT
          echo "--------------------- ARTIFACTS_FILTER ---------"
          artifacts_filter="${artifacts_filter_A:-${artifacts_filter_B:-${artifacts_filter_C:-'target/*.jar,build/*.jar'}}}"
          [[ "${artifacts_filter}" == \"*\" || "${artifacts_filter}" == \'*\' ]] && artifacts_filter="${artifacts_filter:1:-1}"         
          echo "artifacts_filter [${artifacts_filter}]"
          echo "artifacts_filter=${artifacts_filter}" >> $GITHUB_OUTPUT
          echo "--------------------- ENVS ---------------------"
          env
        env:
          ref_A: ${{ inputs.ref }}
          ref_B: ${{ github.event.inputs.ref }}
          ref_C: ${{ github.event.client_payload.ref }}
          artifacts_filter_A: ${{ inputs.artifacts_filter }}
          artifacts_filter_B: ${{ github.event.inputs.artifacts_filter }}
          artifacts_filter_C: ${{ github.event.client_payload.artifacts_filter }}
      - name: "Checkout"
        uses: actions/checkout@main
        with:
          fetch-depth: 500
          ref: ${{ steps.inputs.outputs.ref }}
          token: ${{ secrets.G_TOKEN || secrets.CI_TOKEN_WORKFLOW || github.token }}
      - name: "Prepare GitHub Release"
        id: "changelog"
        run: |
          git fetch --all --tags
          latest_tag=$(git tag --sort=-creatordate | head -1)
          second_latest_tag=$(git tag --sort=-creatordate | head -2 | tail -1)

          echo "latest_tag [${latest_tag}]"
          echo "second_latest_tag [${second_latest_tag}]"

          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
          echo "second_latest_tag=${second_latest_tag}" >> $GITHUB_OUTPUT
          
          mkdir -p target
          if [[ "${latest_tag}" == "${second_latest_tag}" ]]; then 
            git log --pretty=format:'- %s%n' > target/release.log
          else 
            git log --pretty=format:'- %s%n' ${latest_tag}..${second_latest_tag} > target/release.log
          fi

          changelog=$(cat target/release.log)
          echo "latest_tag         [${latest_tag}]"
          echo "second_latest_tag  [${second_latest_tag}]"
          echo "target/release.log [$(cat target/release.log)]"
          echo "changelog          [${changelog}]"

          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
          echo "second_latest_tag=${second_latest_tag}" >> $GITHUB_OUTPUT
          echo "changelog=${changelog}" >> $GITHUB_OUTPUT
      - name: "Create GitHub Release"
        id: "create_release"
        uses: ncipollo/release-action@main
        with:
          tag: ${{ steps.changelog.outputs.latest_tag }}
          artifacts: ${{ steps.inputs.outputs.artifacts_filter }}
          generateReleaseNotes: true
          bodyFile: target/release.log
          token: ${{ secrets.G_TOKEN || secrets.GITHUB_TOKEN }}
